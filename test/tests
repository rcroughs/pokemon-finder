#!/bin/bash

declare -i test_num=1
declare -i test_success=0

function test_new_images() {
   echo -e "\n === Tests de l'option -a avec de nouvelles images ===\n"
   
   while read -r line; do
      values=($line)
      result=$(cd ..; ./launcher -a test/img/"${values[0]}".bmp img | tail -n 1)
      expected_result="Most similar image found: 'img/${values[1]}.bmp' with a distance of ${values[2]}."
      
      echo -n "Test #$test_num  --  ./launcher -a test/img/${values[0]}.bmp img ... "
      
      if [ ! "$result" = "$expected_result" ]; then
         echo -e '\x1B[0;31mÉchec\x1B[0m'
         echo -e "Résultat obtenu :\n\t\x1B[0;33m$result\x1B[0m\nRésultat attendu :\n\t\x1B[0;33m$expected_result\x1B[0m"
      else
         echo -e '\x1B[0;32mSuccès\x1B[0m'
         test_success+=1
      fi
      test_num+=1
   done < test-new-images.data
}

function test_direct_input() {
   echo -e "\n === Tests de l'option -i ===\n"
   
   while read -r line; do
      values=($line)
      result=$(cd ..; ./test/range-name-except ${values[0]} ${values[1]} ${values[2]} | ./launcher -i img/"${values[3]}" | tail -n 1)
      expected_result="Most similar image found: 'img/${values[4]}' with a distance of ${values[5]}."
      
      echo -n "Test #$test_num  --  ./test/range-name-except ${values[0]} ${values[1]} ${values[2]} | ./launcher -i ${values[3]} img ... "
      
      if [ ! "$result" = "$expected_result" ]; then
         echo -e '\x1B[0;31mÉchec\x1B[0m'
         echo -e "Résultat obtenu :\n\t\x1B[0;33m$result\x1B[0m\nRésultat attendu :\n\t\x1B[0;33m$expected_result\x1B[0m"
      else
         echo -e '\x1B[0;32mSuccès\x1B[0m'
         test_success+=1
      fi
      test_num+=1
   done < test-bdd-images.data
}

function test_direct_input_with_path() {
   echo -e "\n === Tests de l'option -i avec un chemin à ajouter au début === \n"
   
   result=$(cd ..; echo -e '1.bmp\n2.bmp\n3.bmp\n4.bmp' | ./launcher -i img/4.bmp img | tail -n 1)
   expected_result="Most similar image found: 'img/4.bmp' with a distance of 0."
   
   echo -n "Test #$test_num  -- echo -e '1.bmp\n2.bmp\n3.bmp\n4.bmp\n' | ./launcher -i img/4.bmp img ... "
   
   if [ ! "$result" = "$expected_result" ]; then
      echo -e '\x1B[0;31mÉchec\x1B[0m'
      echo -e "Résultat obtenu :\n\t\x1B[0;33m$result\x1B[0m\nRésultat attendu :\n\t\x1B[0;33m$expected_result\x1B[0m"
   else
      echo -e '\x1B[0;32mSuccès\x1B[0m'
      test_success+=1
   fi
   test_num+=1
   
   result=$(cd ..; echo -e '1.bmp\n2.bmp\n3.bmp\n4.bmp' | ./launcher -i img/4.bmp img/ | tail -n 1)
   expected_result_1="Most similar image found: 'img//4.bmp' with a distance of 0."
   expected_result_2="Most similar image found: 'img/4.bmp' with a distance of 0."
   
   echo -n "Test #$test_num  -- echo -e '1.bmp\n2.bmp\n3.bmp\n4.bmp' | ./launcher -i img/4.bmp img/ ... "
   
   if [ ! "$result" = "$expected_result_1" ] && [ ! "$result" = "$expected_result_2" ]; then
      echo -e '\x1B[0;31mÉchec\x1B[0m'
      echo -e "Résultat obtenu (2 sont autorisés ici) :\n\t\x1B[0;33m$result\x1B[0m\nRésultat attendu :\n\t\x1B[0;33m$expected_result_1\x1B[0m\nou\n\t\x1B[0;33m$expected_result_2\x1B[0m"
   else
      echo -e '\x1B[0;32mSuccès\x1B[0m'
      test_success+=1
   fi
   test_num+=1
}

function test_invalid_path() {
   echo -e "\n === Tests avec un mauvais chemin/aucune image. ===\n"
   
   result=$(cd ..; echo -n -e '' | ./launcher -i img/4.bmp | tail -n 1)
   expected_result="No similar image found (no comparison could be performed successfully)."
   
   echo -n "Test #$test_num  -- echo -n -e '' | ./launcher -i img/4.bmp ... "
   
   if [ ! "$result" = "$expected_result" ]; then
      echo -e '\x1B[0;31mÉchec\x1B[0m'
      echo -e "Résultat obtenu :\n\t\x1B[0;33m$result\x1B[0m\nRésultat attendu :\n\t\x1B[0;33m$expected_result\x1B[0m"
   else
      echo -e '\x1B[0;32mSuccès\x1B[0m'
      test_success+=1
   fi
   test_num+=1
   
   result=$(cd ..; echo -n -e '' | ./launcher -i test/ | tail -n 1)
   expected_result="No similar image found (no comparison could be performed successfully)."
   
   echo -n "Test #$test_num  -- echo -n -e '' | ./launcher -i test/ ... "
   
   if [ ! "$result" = "$expected_result" ]; then
      echo -e '\x1B[0;31mÉchec\x1B[0m'
      echo -e "Résultat obtenu :\n\t\x1B[0;33m$result\x1B[0m\nRésultat attendu :\n\t\x1B[0;33m$expected_result\x1B[0m"
   else
      echo -e '\x1B[0;32mSuccès\x1B[0m'
      test_success+=1
   fi
   test_num+=1
}

test_direct_input_with_path

test_invalid_path

test_direct_input

test_new_images

test_num=$(( test_num - 1 ))
echo -e "\nRésultat final : $test_success/$test_num"
